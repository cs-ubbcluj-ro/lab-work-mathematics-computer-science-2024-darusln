Mini-Language based on  C++:
1. Language Definition:
    1.1 Alphabet:
        Upper and lower case letters (A-Z, a-z) from the English alphabet
        Underline character _ (for identifier separation)
        Decimal digits (0-9)
    1.2 Lexical Components:
        a) Special Symbols (Operators and Separators):
            -Operators: + - * / = == != > < >= <=
            -Separators: ( ) { } [ ] , : ; space
        b) Reserved Words (Keywords):
            -Data Types: int float struct
            -Control Statements: if else while for
            -I/O Statements: cin cout
            -Boolean Values: true false
        c) Identifiers:
                identifier ::= letter {letter | digit | _}
                letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
                digit ::= "0" | "1" | ... | "9"
        d) Constants:
            -Integer value:
                int ::= +uint | -uint | uint
                uint ::= digit {digit}
            -Float constants:
                float ::= int_const "." uint
            -String constants:
                string ::= "\"" string{char} "\""
                char ::= letter | digit | symbol
            -Boolean constants: the values True and False.
                bool ::= True | False
2. Syntax:
    2.1 Program Structure:
	decllib ::= "#include" "<"library">"
	library ::= iostream | stdio.h
	declnmpsc ::= "using" "namespace" nmspc ";"
	nmspc ::= std | ...
        program ::= {headers} NEWLINE {declnmspc} "int" "main" "(" ")" "{" cmpdstmt "}"

    2.2 Declarations:
    	decl ::= type idlist;
    	idlist ::= ID | ID "," idlist
    	type ::= "int" | "float" | "string" | "bool"
    	structdecl ::= "struct" "{" {decl | structdecl} "}" ID ";" 

    2.3 Compound Statement:
        cmpdstmt ::= "{" stmtlist "}"
    	stmtlist ::= stmt | stmt ";" stmtlist
    
    2.4 Statements:
        stmt ::= simplestmt | structstmt 
	    simplestmt ::= assignstmt | iostmt 
	    structstmt ::= ifstmt | whilestmt

        Assignment Statement:
        assignstsmt ::= ID "=" expression ";"

        Input/Output Statement:
        iostmt ::= "cin" ">>" IDENTIFIER ";" | "cout" "<<" expression ";"
        
        If-Else Statement:
        ifstmt ::= "if" "(" condition ")" cmpdstmt ["else" cmpdstsmt]

        While Statement:
        whilestmt ::= "while" "(" condition ")" cmpdstmt

    2.5 Expressions:
        expression ::= expression ADDOP term | term
        term ::= term MUL_OP factor | factor
        factor ::= "(" expression ")" | IDENTIFIER | constant
    2.6 Conditions:
        condition ::= expression REL_OP expression
        RELOP ::= "==" | "!=" | "<" | "<=" | ">" | ">="
        ADDOP ::= "+" | "-"
        MULOP ::= "*" | "/"
